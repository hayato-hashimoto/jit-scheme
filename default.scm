(define namespace-name "meta")
(define meta (current-namespace))

(define library (make-namespace))
(import-namespace-to library namespace-function)
(import-namespace-to library meta)

(select-namespace library)
(import-namespace-to (current-namespace) alithmatic)
(import-namespace-to (current-namespace) machine)
(import-namespace-to (current-namespace) builtin)
(define car (fn (x) (read (- x 8))))
(define cdr read)
(define tar (fn (x) (read (- x 16))))
(define tbr (fn (x) (read (- x 8))))
(define tdr read)
(define last ((fn (self)
  (set! self (fn (lis) (if (= (cdr lis) 0) (car lis) (self (cdr lis)))))
  self)))
(define map ((fn (self)
  (set! self (fn (proc lis) (if (= lis 0) 0 (cons (proc (car lis)) (self proc (cdr lis))))))
  self)))
(define cadr (fn (x)   (car (cdr x))))
(define caddr (fn (x)  (cadr (cdr x))))
(define cadddr (fn (x) (caddr (cdr x))))

(select-namespace meta)
(define user (make-namespace))
(import-namespace-to user namespace-function)
(import-namespace-to user meta)

(select-namespace user)
(define namespace-name "user")
(import-namespace-to (current-namespace) alithmatic)
(import-namespace-to (current-namespace) internal)
(import-namespace-to (current-namespace) machine)
(import-namespace-to (current-namespace) builtin)
(import-namespace-to (current-namespace) library)
